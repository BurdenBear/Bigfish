{
	"auto_complete":
	{
		"selected_items":
		[
		]
	},
	"buffers":
	[
		{
			"contents": "# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Fri Aug 28 20:12:03 2015\n\n@author: morrison\n\"\"\"\n\nfrom Queue import Queue, Empty\nfrom threading import Thread\n\n\nclass EventEngine:\n\n    def __init__(self):\n        self.__queue = Queue()\n        self.__active = False\n        self.__thread = Threading(target=self.__run)\n        # self.__timer = QTimer()\n        # self.__timer.timeout.connect(self.__onTimer)\n        self.__handlers = {}\n    \n    def __run(self):\n        while self.__active == True:\n            try:\n                event = self.__queue.get(block=True, timeout=1)\n                self.__process(event)\n            except Empty:\n                pass\n    \n    def __process(self, event):\n        if event.type_ in self.___handlers:\n            [handler(event) for handler in self.__handlers[event.type_]]\n    \n    def __onTimer(self, event):\n        event = Event(type_=EVENT_TIMER)\n        self.put(event)\n        \n    def start(self):\n        self.__active = True\n        self.__thread.start()\n        self.__timer.start(1000)\n        \n    def stop(self):\n        self.__active = False\n        self.__timer.stop()\n        self.__thread.join()\n        \n    def stop(self)\n        try:\n            handlerList = self.__handlers[type_]\n        except KeyError:\n            handlerList = []\n            self.__handlers[type_] = handlerList\n        if handler not in handlerList:\n            handlerList.append(handler)\n    \n    def unregister(self, type_, handler):\n        # try:\n            handlerList = self.handlers[type_]\n            if handler in handerList:\n                handlerList.remove(handler)\n            if not handlerList:\n                del self.handlers[type_]\n        except KeyError:\n            pass\n    \n    def put(self,event):\n        self.__queue.put(event)\n    \n",
			"file": "utils/event.py",
			"file_size": 1857,
			"file_write_time": 130867790624354900,
			"settings":
			{
				"buffer_size": 1794,
				"line_ending": "Windows"
			}
		}
	],
	"build_system": "Packages/Python/Python.sublime-build",
	"build_system_choices":
	[
		[
			[
				[
					"Packages/Python/Python.sublime-build",
					""
				],
				[
					"Packages/Python/Python.sublime-build",
					"Syntax Check"
				]
			],
			[
				"Packages/Python/Python.sublime-build",
				""
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 81.0,
		"last_filter": "install",
		"selected_items":
		[
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"",
				"Set Syntax: Python"
			]
		],
		"width": 400.0
	},
	"console":
	{
		"height": 126.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = 'eb2297e1a458f27d836c04bb0cbaf282' + 'd0e7a3098092775ccb37ca9d6b2e4b7d'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/C/Users/Administrator/Documents/Bigfish/Bigfish",
		"/C/Users/Administrator/Documents/Bigfish/Bigfish/utils",
		"/C/Users/Administrator/Documents/Bigfish/Bigfish/wind",
		"/C/Users/Administrator/Documents/Bigfish/Bigfish/wind/__pycache__"
	],
	"file_history":
	[
		"/C/Users/Administrator/Documents/Bigfish/testBacktesting.py",
		"/C/Users/Administrator/Documents/Bigfish/Bigfish/Bigfish.sublime-project",
		"/C/Users/Administrator/AppData/Roaming/Sublime Text 3/Packages/Anaconda/Anaconda.sublime-settings",
		"/C/Users/Administrator/AppData/Roaming/Sublime Text 3/Packages/User/Anaconda.sublime-settings",
		"/C/Users/Administrator/AppData/Roaming/Sublime Text 3/Packages/User/Plain text.sublime-settings"
	],
	"find":
	{
		"height": 0.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "utils/event.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1794,
						"regions":
						{
						},
						"selection":
						[
							[
								451,
								451
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				}
			]
		},
		{
			"sheets":
			[
			]
		}
	],
	"incremental_find":
	{
		"height": 0.0
	},
	"input":
	{
		"height": 0.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			],
			[
				1,
				0,
				2,
				1
			]
		],
		"cols":
		[
			0.0,
			0.5,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 100.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "Packages/Python/Python.sublime-build",
	"project": "Bigfish.sublime-project",
	"replace":
	{
		"height": 0.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 150.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
